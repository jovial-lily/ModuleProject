apply plugin: 'com.android.application'

//引用自定义config.gradle的属性
//println "${rootProject.ext.username}"
//println "${username}"
//因为groovy是弱类型语言，也称之为糖果语言，所以这里可以修改自定义的值和类型
//rootProject.ext.username = 163//直接给String类型赋值int值
//println "${rootProject.ext.username}"

//赋值和引用
// （这里以config.gradle为例，为啥这里可以直接引用config.gradle,因为在根目录的gradle已经引用的config.gradle）
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies//这里需要注意，因为下面有个dependencies所以这里引用后该个变量名
def url = rootProject.ext.url
android {
    compileSdkVersion androidId.compileSdkVersion
    defaultConfig {
        applicationId appId.app
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //开启分包  组件化开发
        multiDexEnabled true
        //这只分包配置
//        multiDexKeepFile file('multidex-config.txt')
        //将svg图片生成指定维度的png图片
//        vectorDrawables.generatedDensities('xhdpi','xxhdpi')
        //使用support-v7兼容（5.0版本以上）
        vectorDrawables.useSupportLibrary = true
        //只保留指定和默认资源
        resConfigs('zh-rCN')


        //配置so库CPU架构（真机：arm ，模拟器：x86）
        //x86 x86_64  mips  mips64
        ndk {
            //真机
            abiFilters('armeabi', 'armeabi-v7a')
            //模拟器
//            abiFilters('x86','x86_64')
        }


        //源集  -  设置源集的属性，更改源集的java 目录或者自由目录等
        sourceSets {
            main {
                if (!isRelease) {
                    //如果组件化模式，需要单独运行时
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java.srcDirs = ['src/main/java']
                    res.srcDirs = ['src/main/res']
                    resources.srcDirs = ['src/main/resources']
                    aidl.srcDirs = ['src/main/aidl']
                    assets.srcDirs = ['src/main/assets']
                } else {
                    //集成化模式，整个项目打包
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }
        //APT传参接收，这个节点必须写在defaultConfig节点
        // 里面这里把模块名和要生成的类放在哪个包下面两个参数传过去
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(),packageNameForAPT:packageNameForAPT]
            }
        }
    }


    //这个签名配置必须写在buildTypes之前
    signingConfigs {
        debug {
            //天坑，填错了，编译不通过还找不到问题
            //默认as的安装目录
            storeFile file('C:/Users/Administrator/.android/debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            //签名证书文件
            storeFile file('C:/Users/Administrator/.android/debug.keystory')
            //签名证书类型
            storeType "xx"
            //签名证书文件的密码
            storePassword "debug"
            //签名证书的别名
            keyAlias "debug"
            //签名整数中该秘钥的密码
            keyPassword ""
            //是否开启v2打包
            v2SigningEnabled true
        }
    }
    buildTypes {
        //会在BuildConfig.java中生成一个常量(参数类型，参数名，参数的值)
        debug {
            signingConfig signingConfigs.debug
            buildConfigField("String", "URL", "\"${url.debug}\"")
        }
        release {
            signingConfig signingConfigs.release
            buildConfigField("String", "URL", "\"${url.release}\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //adbOptions 可以对adb操作选项添加配置
    adbOptions {
        //配置操作超时时间，单位毫秒
        timeOutInMs = 5 * 1000_0
        //adb install 命令额选项配置
        installOptions '-r', '-s'
    }
    //对dx 操作的配置，接受一个DexOptions 类型的闭包，配置由DexOptions 提供
    dexOptions {
        //配置执行dx命令是为其分配的最大堆内存
        javaMaxHeapSize "4g"
        //配置是否预执行dex Libraries 工程，开启后会提高构建速度，不过会影响clean构建的速度，默认是true
        preDexLibraries = false
        //配置是否开启jumbo模式，代码方法是超过65535 需要强制开启才能构建成功
        jumboMode true
        //配置Gradle 运行dx命令时使用的线程数量
        threadCount 8
        //配置multidex参数
        additionalParameters = [
                '--multi-dex',//多dex分包
                '--set-max-idx-number=50000',//每个包内方法数上限
                //'--main-dex-List= '+ '/mutidex-config.txt',//打包到主classes.dex文件列表
                '--minimal-main-dex'
        ]
    }

    //执行gradle lint 命令即可运行lint检查，默认生成的报告在outputs/lint-results.html 中
    lintOptions {
        //遇到lint检查错误会终止构建，一般设置为false
        abortOnError false
        //将警告当做错误来处理（老版本：warningAsErros）
        warningsAsErrors false
        //检查新API
        check 'NewApi'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'com.android.support:appcompat-v7:+'
//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //说明：我们传统这种写法，其实是简写：
    //implementation 'com.android.support:appcompat-v7:+'
    //标准写法：
    //implementation group:'',name'',version:''
    //implementation group:'com.android.support',name'appcompat-v7',version:'+'

    implementation project(":library") //公共基础库
    implementation project(":annotation")
    annotationProcessor project(":compiler")//引入注解处理器
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    //依赖library库
    if (isRelease) {
        implementation project(":personal")
        implementation project(":order")
    }
    //用自定义的config.gradle里面的引用替换
    //1----传统引用
//    implementation support.appcompat
//    implementation support.recyclerview
//    implementation support.constraint
    //2------循环
    support.each { k, v -> implementation v }
}
