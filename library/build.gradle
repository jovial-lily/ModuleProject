//因为这个座位公共库，所以不允许单独运行
//if (isRelease) {
    apply plugin: 'com.android.library'
//} else {
//    apply plugin: 'com.android.application'
//}
//同样可以引用config.gradle定义的字典属性
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId //组件化需要这个，集成化不需要
def support = rootProject.ext.dependencies
android {
    compileSdkVersion androidId.compileSdkVersion
    defaultConfig {
//        if (!isRelease) {
//            applicationId appId.app
//        }
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    implementation 'com.android.support:appcompat-v7:+'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


    //因为所有子模块都引用了这个模块，所以子模块都需要引用的arouter-api可以在这里使用
    // 双向引用的方式，就不需要在子模块重复引用,所有api都对子模块开放了
    api project(':arouter-api')


    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    support.each { k, v -> implementation v }



}
