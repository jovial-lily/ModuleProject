if (isRelease) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies


android {
    compileSdkVersion androidId.compileSdkVersion


    defaultConfig {
        if (!isRelease) {
            applicationId appId.app
        }
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        //APT传参接收，这个节点必须写在defaultConfig节点
        // 里面这里把模块名和要生成的类放在哪个包下面两个参数传过去
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(),packageNameForAPT:packageNameForAPT]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            if (!isRelease) {
                //如果是组件化模式，需要单独运行
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                //集成化模式，整个项目打包apk
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //release时 debug目录下文件不需要合并到主工程
                    exclude '**/debug/**'
                }
            }
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    implementation 'androidx.appcompat:appcompat:1.0.2'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
//    implementation 'androidx.appcompat:appcompat:1.0.2'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation project(":library")
    implementation project(":annotation")
    annotationProcessor project(":compiler")//引入注解处理器
    support.each { k, v -> implementation v }
}
